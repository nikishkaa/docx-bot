import telebot
from file_handler import FileHandler
from telebot import types
import os
import json
from dotenv import load_dotenv
from error_logger import log_error
import zipfile
import io

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
bot = telebot.TeleBot(TOKEN)
file_handler = FileHandler()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–∞—Ö
uploading_files = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_context = {}

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS_FILE = 'download_stats.json'

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def load_stats():
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª
def save_stats():
    try:
        with open(STATS_FILE, 'w', encoding='utf-8') as f:
            json.dump(download_stats, f, ensure_ascii=False, indent=2)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        log_error(error_msg, "system", "save_stats")
        print(error_msg)  # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
download_stats = load_stats()

# –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
bot.remove_webhook()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.set_my_commands([
    types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    types.BotCommand("files", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"),
    types.BotCommand("get", "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏"),
    types.BotCommand("search", "–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏"),
    types.BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
])


def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã')
    btn2 = types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤')
    btn3 = types.KeyboardButton('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª')
    btn4 = types.KeyboardButton('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤')
    btn5 = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    btn6 = types.KeyboardButton('‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    return markup


def create_category_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup.add(types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ö–Ω–∏–≥–∏" —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup.add(types.KeyboardButton('üìö –ö–Ω–∏–≥–∏'))
    
    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category in file_handler.categories:
        if category != "–ö–Ω–∏–≥–∏":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "–ö–Ω–∏–≥–∏", —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏
            btn = types.KeyboardButton(f"üìÇ {category}")
            markup.add(btn)
    return markup


def create_subcategory_menu(category):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = [
        types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'),
        types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    ]
    markup.add(*nav_buttons)

    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category in file_handler.subcategories:
        for subcategory in file_handler.subcategories[category]:
            btn = types.KeyboardButton(f"üìÅ {subcategory}")
            markup.add(btn)
    return markup


def create_files_menu(files, category, subcategory=None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if subcategory:
        nav_buttons.append(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'))
    nav_buttons.append(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'))
    nav_buttons.append(types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    markup.add(*nav_buttons)

    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    for file in files:
        btn = types.KeyboardButton(f"üì• {file['name']}")
        markup.add(btn)

    return markup


def create_additional_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    btn2 = types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π')
    btn3 = types.KeyboardButton('üìà –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    btn4 = types.KeyboardButton('üë§ –ú–æ–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è')
    btn5 = types.KeyboardButton('üì¶ –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    markup = create_main_menu()
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª–∞–º–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=markup
    )


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "üìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/files - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n"
        "/get filename - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏\n"
        "/search query - –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    bot.send_message(message.chat.id, help_text)


def show_categories(message, view_only=False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    markup = create_category_menu()
    if view_only:
        bot.send_message(
            message.chat.id,
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:",
            reply_markup=markup
        )
    else:
        bot.send_message(
            message.chat.id,
            "üì• –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:",
            reply_markup=markup
        )


def show_subcategories(message, category):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_context[message.chat.id] = {'category': category}
    
    markup = create_subcategory_menu(category)
    bot.send_message(
        message.chat.id,
        f"üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ {category}:",
        reply_markup=markup
    )


def list_files(message, category, subcategory=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    user_context[message.chat.id] = {
        'category': category,
        'subcategory': subcategory
    }
    
    files = file_handler.get_files_list(category, subcategory)
    if not files:
        if subcategory:
            markup = create_subcategory_menu(category)
            bot.send_message(
                message.chat.id,
                f"üì≠ –í –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {subcategory} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.",
                reply_markup=markup
            )
        else:
            markup = create_category_menu()
            bot.send_message(
                message.chat.id,
                f"üì≠ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.",
                reply_markup=markup
            )
        return

    response = f"üìÅ –§–∞–π–ª—ã –≤ "
    if subcategory:
        response += f"–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {subcategory} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:\n\n"
    else:
        response += f"–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:\n\n"
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if not subcategory and category in file_handler.subcategories:
        response += "üìÇ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        for subcat in file_handler.subcategories[category]:
            response += f"üìÅ {subcat}\n"
        response += "\n"
    
    # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    response += "üìë –§–∞–π–ª—ã:\n"
    for file in files:
        file_path = f"{category}"
        if 'subcategory' in file:
            file_path += f"/{file['subcategory']}"
        file_path += f"/{file['name']}"
        
        response += f"üìÑ {file['name']}\n"
        response += f"üìÇ –ü—É—Ç—å: {file_path}\n"
        response += f"üìä –†–∞–∑–º–µ—Ä: {file['size']}\n"
        response += f"üïí –î–∞—Ç–∞: {file['date']}\n\n"

    markup = create_files_menu(files, category, subcategory)
    bot.send_message(message.chat.id, response, reply_markup=markup)


@bot.message_handler(commands=['files'])
def files_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /files"""
    show_all_files(message)


@bot.message_handler(commands=['get'])
def get_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞.\n–ü—Ä–∏–º–µ—Ä: /get example.txt")
            return

        file_name = parts[1].strip()
        found = False

        # –ò—â–µ–º —Ñ–∞–π–ª –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        for category in file_handler.categories:
            file_data = file_handler.get_file(file_name, category)
            if file_data is not None:
                bot.send_document(
                    message.chat.id,
                    file_data,
                    visible_file_name=file_name
                )
                found = True
                break

            if category in file_handler.subcategories:
                for subcategory in file_handler.subcategories[category]:
                    file_data = file_handler.get_file(file_name, category, subcategory)
                    if file_data is not None:
                        bot.send_document(
                            message.chat.id,
                            file_data,
                            visible_file_name=file_name
                        )
                        found = True
                        break
                if found:
                    break

        if not found:
            error_msg = f"–§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            log_error(error_msg, message.from_user.id, f"Command: /get {file_name}")
            bot.reply_to(message, f"‚ùå {error_msg}")
    except Exception as e:
        error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        log_error(error_msg, message.from_user.id, f"Command: /get {file_name if 'file_name' in locals() else 'unknown'}")
        bot.reply_to(message, f"‚ùå {error_msg}")


@bot.message_handler(content_types=['document'])
def handle_document(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    try:
        if not message.document:
            error_msg = "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"
            log_error(error_msg, message.from_user.id)
            bot.reply_to(message, f"‚ùå {error_msg}")
            return

        if not message.document.file_id:
            error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞"
            log_error(error_msg, message.from_user.id)
            bot.reply_to(message, f"‚ùå {error_msg}")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        uploading_files[message.chat.id] = {
            'file_id': message.document.file_id,
            'file_name': message.document.file_name
        }

        markup = create_category_menu()
        bot.send_message(
            message.chat.id,
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–∞:",
            reply_markup=markup
        )
        bot.register_next_step_handler(message, process_category_selection)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
        log_error(error_msg, message.from_user.id)
        bot.reply_to(message, f"‚ùå {error_msg}")


def process_category_selection(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = create_main_menu()
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_context.pop(message.chat.id, None)
        return

    category = message.text[2:].strip() if message.text.startswith('üìÇ ') else "Other"

    if category in file_handler.subcategories:
        markup = create_subcategory_menu(category)
        bot.send_message(
            message.chat.id,
            f"üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ {category}:",
            reply_markup=markup
        )
        bot.register_next_step_handler(message, lambda m: process_subcategory_selection(m, category))
    else:
        save_file_to_category(message, category)


def process_subcategory_selection(message, category):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = create_main_menu()
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_context.pop(message.chat.id, None)
        return
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º':
        show_categories(message)
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        user_context.pop(message.chat.id, None)
        return

    subcategory = message.text[2:].strip() if message.text.startswith('üìÅ ') else None

    if subcategory and subcategory in file_handler.subcategories[category]:
        save_file_to_category(message, category, subcategory)
    else:
        markup = create_subcategory_menu(category)
        bot.send_message(
            message.chat.id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=markup
        )


def save_file_to_category(message, category, subcategory=None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        file_info = uploading_files.get(message.chat.id)
        if not file_info:
            error_msg = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            log_error(error_msg, message.from_user.id)
            bot.reply_to(message, f"‚ùå {error_msg}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        existing_files = file_handler.get_files_list(category, subcategory)
        for file in existing_files:
            if file['name'] == file_info['file_name']:
                error_msg = f"–§–∞–π–ª —Å –∏–º–µ–Ω–µ–º {file_info['file_name']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                log_error(error_msg, message.from_user.id, f"Category: {category}, Subcategory: {subcategory}")
                markup = create_main_menu()
                bot.send_message(
                    message.chat.id,
                    f"‚ùå {error_msg}",
                    reply_markup=markup
                )
                uploading_files.pop(message.chat.id, None)
                return

        file_data = bot.get_file(file_info['file_id'])
        if not file_data:
            error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"
            log_error(error_msg, message.from_user.id)
            bot.reply_to(message, f"‚ùå {error_msg}")
            return

        downloaded_file = bot.download_file(file_data.file_path)
        if not downloaded_file:
            error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª"
            log_error(error_msg, message.from_user.id)
            bot.reply_to(message, f"‚ùå {error_msg}")
            return

        file_handler.save_file(
            file_info['file_id'],
            file_info['file_name'],
            downloaded_file,
            category,
            subcategory
        )

        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        uploading_files.pop(message.chat.id, None)

        markup = create_main_menu()
        location = f"–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é {subcategory} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}" if subcategory else f"–∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}"
        bot.send_message(
            message.chat.id,
            f"‚úÖ –§–∞–π–ª {file_info['file_name']} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {location}!",
            reply_markup=markup
        )
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        uploading_files.pop(message.chat.id, None)
        error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        log_error(error_msg, message.from_user.id, f"Category: {category}, Subcategory: {subcategory}")
        markup = create_main_menu()
        bot.send_message(
            message.chat.id,
            f"‚ùå {error_msg}",
            reply_markup=markup
        )


def show_all_files(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    all_files = []
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for category in file_handler.categories:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        files = file_handler.get_files_list(category)
        for file in files:
            file['category'] = category
            all_files.append(file)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if category in file_handler.subcategories:
            for subcategory in file_handler.subcategories[category]:
                files = file_handler.get_files_list(category, subcategory)
                for file in files:
                    file['category'] = category
                    file['subcategory'] = subcategory
                    all_files.append(file)
    
    if not all_files:
        bot.send_message(message.chat.id, "üì≠ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏–º–µ–Ω–∏
    all_files.sort(key=lambda x: (x['category'], x.get('subcategory', ''), x['name']))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Å —ç–º–æ–¥–∑–∏ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
    total_files = len(all_files)
    counter_message = f"üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–ô–õ–û–í*\n\nüìö –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: *{total_files}*"
    bot.send_message(message.chat.id, counter_message, parse_mode='Markdown')
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 10 —Ñ–∞–π–ª–æ–≤
    for i in range(0, len(all_files), 10):
        chunk = all_files[i:i + 10]
        response = ""
        for file in chunk:
            response += f"üìÑ {file['name']}\n"
            response += f"üìÇ –ü—É—Ç—å: {file['category']}"
            if 'subcategory' in file:
                response += f"/{file['subcategory']}"
            response += f"\nüìä –†–∞–∑–º–µ—Ä: {file['size']}\n"
            response += f"üïí –î–∞—Ç–∞: {file['date']}\n\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Å–ø–∏—Å–∫–∞
        if response:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            bot.send_message(message.chat.id, response)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—â–µ —Ä–∞–∑ –≤ –∫–æ–Ω—Ü–µ —Å —ç–º–æ–¥–∑–∏ —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –≤–≤–µ—Ä—Ö
    final_counter_message = f"‚¨ÜÔ∏è *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–ô–õ–û–í*\n\nüìö –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: *{total_files}*"
    bot.send_message(message.chat.id, final_counter_message, parse_mode='Markdown')


def search_files(message):
    """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    search_query = message.text.strip()

    if not search_query:
        bot.reply_to(message, "üîç –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n–ü—Ä–∏–º–µ—Ä: docker")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    all_files = []
    for category in file_handler.categories:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        files = file_handler.get_files_list(category)
        for file in files:
            file['category'] = category
            all_files.append(file)

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if category in file_handler.subcategories:
            for subcategory in file_handler.subcategories[category]:
                files = file_handler.get_files_list(category, subcategory)
                for file in files:
                    file['category'] = category
                    file['subcategory'] = subcategory
                    all_files.append(file)

    # –ò—â–µ–º —Ñ–∞–π–ª—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    found_files = []
    search_query = search_query.lower()
    for file in all_files:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if (search_query in file['name'].lower() or 
            (search_query == '–∫–Ω–∏–≥–∏' and file['category'] == '–ö–Ω–∏–≥–∏') or
            (search_query == 'üìö –∫–Ω–∏–≥–∏' and file['category'] == '–ö–Ω–∏–≥–∏')):
            found_files.append(file)

    if not found_files:
        bot.reply_to(message, f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    found_files.sort(key=lambda x: (x['category'], x.get('subcategory', ''), x['name']))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞
    total_found = len(found_files)
    counter_message = f"üîç *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê*\n\nüìö –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: *{total_found}*\nüîé –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: *{search_query}*"
    bot.send_message(message.chat.id, counter_message, parse_mode='Markdown')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for i in range(0, len(found_files), 10):
        chunk = found_files[i:i + 10]
        response = ""
        for file in chunk:
            response += f"üìÑ {file['name']}\n"
            response += f"üìÇ –ü—É—Ç—å: {file['category']}"
            if 'subcategory' in file:
                response += f"/{file['subcategory']}"
            response += f"\nüìä –†–∞–∑–º–µ—Ä: {file['size']}\n"
            response += f"üïí –î–∞—Ç–∞: {file['date']}\n\n"

        if response:
            bot.send_message(message.chat.id, response)


@bot.message_handler(commands=['search'])
def handle_search(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        bot.reply_to(message, "üîç –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n–ü—Ä–∏–º–µ—Ä: /search docker")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞
    message.text = parts[1].strip()
    search_files(message)


@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    if message.text == 'üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã':
        show_categories(message)
    elif message.text == 'üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤':
        show_all_files(message)
    elif message.text == 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª':
        bot.send_message(
            message.chat.id,
            "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª, –∏ —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é."
        )
    elif message.text == 'üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤':
        bot.send_message(
            message.chat.id,
            "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n–ü—Ä–∏–º–µ—Ä: docker"
        )
        bot.register_next_step_handler(message, search_files)
    elif message.text == '‚ùì –ü–æ–º–æ—â—å':
        help_command(message)
    elif message.text == '‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ':
        markup = create_additional_menu()
        bot.send_message(
            message.chat.id,
            "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
    elif message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π':
        show_download_stats(message)
    elif message.text == 'üìà –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        show_brief_stats(message)
    elif message.text == 'üë§ –ú–æ–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è':
        show_user_downloads(message)
    elif message.text == 'üì¶ –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏':
        create_archive(message)
    elif message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = create_main_menu()
        bot.send_message(
            message.chat.id,
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=markup
        )
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_context.pop(message.chat.id, None)
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º':
        show_categories(message)
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        user_context.pop(message.chat.id, None)
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º':
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context = user_context.get(message.chat.id, {})
        category = context.get('category')
        
        if category and category in file_handler.subcategories:
            show_subcategories(message, category)
        else:
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            show_categories(message)
    elif message.text.startswith('üìÇ ') or message.text == 'üìö –ö–Ω–∏–≥–∏':
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —É–±–∏—Ä–∞—è —Å–º–∞–π–ª–∏–∫
        category = message.text[2:].strip() if message.text.startswith('üìÇ ') else "–ö–Ω–∏–≥–∏"
        
        if category in file_handler.subcategories:
            show_subcategories(message, category)
        else:
            list_files(message, category)
    elif message.text.startswith('üìÅ '):
        subcategory = message.text[2:].strip()
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context = user_context.get(message.chat.id, {})
        category = context.get('category')
        
        if category and subcategory in file_handler.subcategories.get(category, []):
            list_files(message, category, subcategory)
        else:
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            for cat in file_handler.subcategories:
                if subcategory in file_handler.subcategories[cat]:
                    list_files(message, cat, subcategory)
                    break
    elif message.text.startswith('üì• '):
        file_name = message.text[2:].strip()
        try:
            found = False
            for category in file_handler.categories:
                file_data = file_handler.get_file(file_name, category)
                if file_data is not None:
                    bot.send_document(
                        message.chat.id,
                        file_data,
                        visible_file_name=file_name
                    )
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
                    if file_name not in download_stats:
                        download_stats[file_name] = {}
                    user_id = str(message.from_user.id)
                    download_stats[file_name][user_id] = download_stats[file_name].get(user_id, 0) + 1
                    save_stats()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    found = True
                    break
                
                if category in file_handler.subcategories:
                    for subcategory in file_handler.subcategories[category]:
                        file_data = file_handler.get_file(file_name, category, subcategory)
                        if file_data is not None:
                            bot.send_document(
                                message.chat.id,
                                file_data,
                                visible_file_name=file_name
                            )
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
                            if file_name not in download_stats:
                                download_stats[file_name] = {}
                            user_id = str(message.from_user.id)
                            download_stats[file_name][user_id] = download_stats[file_name].get(user_id, 0) + 1
                            save_stats()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                            found = True
                            break
                    if found:
                        break
            
            if not found:
                bot.reply_to(message, f"‚ùå –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
            log_error(error_msg, message.from_user.id, f"File: {file_name}")
            bot.reply_to(message, f"‚ùå {error_msg}")
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_query = message.text.strip()
        if search_query:
            search_files(message)
        else:
            bot.send_message(
                message.chat.id,
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            )


def show_download_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
    if not download_stats:
        bot.send_message(
            message.chat.id,
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –ø—É—Å—Ç–∞.\n–§–∞–π–ª—ã –µ—â–µ –Ω–µ —Å–∫–∞—á–∏–≤–∞–ª–∏—Å—å."
        )
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
    sorted_stats = sorted(
        download_stats.items(),
        key=lambda x: sum(x[1].values()),
        reverse=True
    )

    response = "üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–ô*\n\n"
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Ä—Ö–∏–≤–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    archive_stats = next((item for item in sorted_stats if item[0] == "üì¶ programming-documentation.zip"), None)
    if archive_stats:
        file_name, users = archive_stats
        total_downloads = sum(users.values())
        response += f"üì¶ *–ê—Ä—Ö–∏–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π*\n"
        response += f"üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: *{total_downloads}*\n"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if users:
            response += "üë• *–°–ø–∏—Å–æ–∫ —Å–∫–∞—á–∞–≤—à–∏—Ö:*\n"
            sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
            for user_id, count in sorted_users:
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user = bot.get_chat_member(message.chat.id, int(user_id))
                    if user and user.user:
                        user_name = user.user.first_name
                        if user.user.last_name:
                            user_name += f" {user.user.last_name}"
                        username = f" (@{user.user.username})" if user.user.username else ""
                    else:
                        user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
                        username = ""
                except Exception as e:
                    user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
                    username = ""
                response += f"‚Ä¢ {user_name}{username}: {count} —Ä–∞–∑\n"
        response += "\n"
    
    # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for file_name, users in sorted_stats:
        if file_name == "üì¶ programming-documentation.zip":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Ä—Ö–∏–≤, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏
            continue
        total_downloads = sum(users.values())
        response += f"üìÑ *{file_name}*\n"
        response += f"üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: *{total_downloads}*\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if users:
            response += "üë• *–°–ø–∏—Å–æ–∫ —Å–∫–∞—á–∞–≤—à–∏—Ö:*\n"
            sorted_users = sorted(users.items(), key=lambda x: x[1], reverse=True)
            for user_id, count in sorted_users:
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user = bot.get_chat_member(message.chat.id, int(user_id))
                    if user and user.user:
                        user_name = user.user.first_name
                        if user.user.last_name:
                            user_name += f" {user.user.last_name}"
                        username = f" (@{user.user.username})" if user.user.username else ""
                    else:
                        user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
                        username = ""
                except Exception as e:
                    user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
                    username = ""
                response += f"‚Ä¢ {user_name}{username}: {count} —Ä–∞–∑\n"
        response += "\n"

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            bot.send_message(message.chat.id, part, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, response, parse_mode='Markdown')


def show_brief_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
    if not download_stats:
        bot.send_message(
            message.chat.id,
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –ø—É—Å—Ç–∞.\n–§–∞–π–ª—ã –µ—â–µ –Ω–µ —Å–∫–∞—á–∏–≤–∞–ª–∏—Å—å."
        )
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
    sorted_stats = sorted(
        download_stats.items(),
        key=lambda x: sum(x[1].values()),
        reverse=True
    )

    response = "üìà *–ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–ô*\n\n"
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Ä—Ö–∏–≤–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    archive_stats = next((item for item in sorted_stats if item[0] == "üì¶ programming-documentation.zip"), None)
    if archive_stats:
        file_name, users = archive_stats
        total_downloads = sum(users.values())
        unique_users = len(users)
        response += f"üì¶ *–ê—Ä—Ö–∏–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π*\n"
        response += f"üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: *{total_downloads}*\n"
        response += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫–∞—á–∞–≤—à–∏—Ö: *{unique_users}*\n\n"
    
    # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for file_name, users in sorted_stats:
        if file_name == "üì¶ programming-documentation.zip":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Ä—Ö–∏–≤, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏
            continue
        total_downloads = sum(users.values())
        unique_users = len(users)
        response += f"üìÑ *{file_name}*\n"
        response += f"üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: *{total_downloads}*\n"
        response += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫–∞—á–∞–≤—à–∏—Ö: *{unique_users}*\n\n"

    bot.send_message(message.chat.id, response, parse_mode='Markdown')


def show_user_downloads(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(message.from_user.id)
    user_files = {}
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–∞—á–∏–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    for file_name, users in download_stats.items():
        if user_id in users:
            user_files[file_name] = users[user_id]
    
    if not user_files:
        bot.send_message(
            message.chat.id,
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."
        )
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
    sorted_files = sorted(
        user_files.items(),
        key=lambda x: x[1],
        reverse=True
    )

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    try:
        user = bot.get_chat_member(message.chat.id, int(user_id))
        if user and user.user:
            user_name = user.user.first_name
            if user.user.last_name:
                user_name += f" {user.user.last_name}"
            username = f" (@{user.user.username})" if user.user.username else ""
        else:
            user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
            username = ""
    except Exception as e:
        user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        username = ""

    response = f"üë§ *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–ô*\n\n"
    response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *{user_name}{username}*\n\n"
    
    total_downloads = sum(user_files.values())
    unique_files = len(user_files)
    response += f"üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: *{total_downloads}*\n"
    response += f"üìÑ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: *{unique_files}*\n\n"
    
    response += "üìÑ *–°–ø–∏—Å–æ–∫ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:*\n\n"
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    archive_downloads = next((item for item in sorted_files if item[0] == "üì¶ programming-documentation.zip"), None)
    if archive_downloads:
        file_name, count = archive_downloads
        response += f"‚Ä¢ üì¶ *–ê—Ä—Ö–∏–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π*: {count} —Ä–∞–∑\n"
    
    # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    for file_name, count in sorted_files:
        if file_name == "üì¶ programming-documentation.zip":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Ä—Ö–∏–≤, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏
            continue
        response += f"‚Ä¢ *{file_name}*: {count} —Ä–∞–∑\n"

    bot.send_message(message.chat.id, response, parse_mode='Markdown')


def create_archive(message):
    """–°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –≤ –ø–∞–º—è—Ç–∏
        archive = io.BytesIO()
        with zipfile.ZipFile(archive, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            for category in file_handler.categories:
                category_path = os.path.join(file_handler.base_dir, category)
                if os.path.exists(category_path):
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    for root, dirs, files in os.walk(category_path):
                        for file in files:
                            file_path = os.path.join(root, file)
                            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∞—Ä—Ö–∏–≤–∞
                            arcname = os.path.relpath(file_path, file_handler.base_dir)
                            zipf.write(file_path, arcname)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –∞—Ä—Ö–∏–≤–∞
        archive.seek(0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –∞—Ä—Ö–∏–≤–∞
        archive_name = "üì¶ programming-documentation.zip"
        if archive_name not in download_stats:
            download_stats[archive_name] = {}
        user_id = str(message.from_user.id)
        download_stats[archive_name][user_id] = download_stats[archive_name].get(user_id, 0) + 1
        save_stats()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
        bot.send_document(
            message.chat.id,
            archive,
            visible_file_name='programming-documentation.zip',
            caption="üì¶ –ê—Ä—Ö–∏–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"
        )
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}"
        log_error(error_msg, message.from_user.id)
        bot.reply_to(message, f"‚ùå {error_msg}")


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.polling(non_stop=True) 