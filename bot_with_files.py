import telebot
from file_handler import FileHandler
from telebot import types
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
bot = telebot.TeleBot(TOKEN)
file_handler = FileHandler()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–∞—Ö
uploading_files = {}

# –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
bot.remove_webhook()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.set_my_commands([
    types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    types.BotCommand("files", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"),
    types.BotCommand("get", "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏"),
    types.BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
])

def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã')
    btn2 = types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤')
    btn3 = types.KeyboardButton('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª')
    btn4 = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    markup.add(btn1, btn2, btn3, btn4)
    return markup

def create_category_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup.add(types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category in file_handler.categories:
        btn = types.KeyboardButton(f"üìÇ {category}")
        markup.add(btn)
    return markup

def create_subcategory_menu(category):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = [
        types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'),
        types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    ]
    markup.add(*nav_buttons)
    
    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category in file_handler.subcategories:
        for subcategory in file_handler.subcategories[category]:
            btn = types.KeyboardButton(f"üìÅ {subcategory}")
            markup.add(btn)
    return markup

def create_files_menu(files, category, subcategory=None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if subcategory:
        nav_buttons.append(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'))
    nav_buttons.append(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'))
    nav_buttons.append(types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    markup.add(*nav_buttons)
    
    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    for file in files:
        btn = types.KeyboardButton(f"üì• {file['name']}")
        markup.add(btn)
    
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    markup = create_main_menu()
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª–∞–º–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=markup
    )

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "üìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/files - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n"
        "/get filename - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    bot.send_message(message.chat.id, help_text)

def show_categories(message, view_only=False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    markup = create_category_menu()
    if view_only:
        bot.send_message(
            message.chat.id,
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:",
            reply_markup=markup
        )
    else:
        bot.send_message(
            message.chat.id,
            "üì• –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:",
            reply_markup=markup
        )

def show_subcategories(message, category):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    markup = create_subcategory_menu(category)
    bot.send_message(
        message.chat.id,
        f"üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ {category}:",
        reply_markup=markup
    )

def list_files(message, category, subcategory=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    files = file_handler.get_files_list(category, subcategory)
    if not files:
        if subcategory:
            markup = create_subcategory_menu(category)
            bot.send_message(
                message.chat.id,
                f"üì≠ –í –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {subcategory} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.",
                reply_markup=markup
            )
        else:
            markup = create_category_menu()
            bot.send_message(
                message.chat.id,
                f"üì≠ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.",
                reply_markup=markup
            )
        return

    response = f"üìÅ –§–∞–π–ª—ã –≤ "
    if subcategory:
        response += f"–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {subcategory} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:\n\n"
    else:
        response += f"–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:\n\n"
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if not subcategory and category in file_handler.subcategories:
        response += "üìÇ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        for subcat in file_handler.subcategories[category]:
            response += f"üìÅ {subcat}\n"
        response += "\n"
    
    # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    response += "üìÑ –§–∞–π–ª—ã:\n"
    for file in files:
        file_path = f"{category}"
        if 'subcategory' in file:
            file_path += f"/{file['subcategory']}"
        file_path += f"/{file['name']}"
        
        response += f"üìÑ {file['name']}\n"
        response += f"üìÇ –ü—É—Ç—å: {file_path}\n"
        response += f"üìä –†–∞–∑–º–µ—Ä: {file['size']}\n"
        response += f"üïí –î–∞—Ç–∞: {file['date']}\n\n"
    
    markup = create_files_menu(files, category, subcategory)
    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.message_handler(commands=['get'])
def get_file(message):
    try:
        file_name = message.text.split()[1] if len(message.text.split()) > 1 else None
        
        if not file_name:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞.\n–ü—Ä–∏–º–µ—Ä: /get example.txt")
            return

        file_data = file_handler.get_file(file_name)
        
        if file_data is None:
            bot.reply_to(message, f"‚ùå –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        bot.send_document(
            message.chat.id,
            file_data,
            visible_file_name=file_name
        )
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

@bot.message_handler(content_types=['document'])
def handle_document(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    if not message.document:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    if not message.document.file_id:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    uploading_files[message.chat.id] = {
        'file_id': message.document.file_id,
        'file_name': message.document.file_name
    }

    markup = create_category_menu()
    bot.send_message(
        message.chat.id,
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–∞:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, process_category_selection)

def process_category_selection(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = create_main_menu()
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)
        return

    category = message.text[2:].strip() if message.text.startswith('üìÇ ') else "Other"
    
    if category in file_handler.subcategories:
        markup = create_subcategory_menu(category)
        bot.send_message(
            message.chat.id,
            f"üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ {category}:",
            reply_markup=markup
        )
        bot.register_next_step_handler(message, lambda m: process_subcategory_selection(m, category))
    else:
        save_file_to_category(message, category)

def process_subcategory_selection(message, category):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = create_main_menu()
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)
        return
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º':
        show_categories(message)
        return

    subcategory = message.text[2:].strip() if message.text.startswith('üìÅ ') else None
    
    if subcategory and subcategory in file_handler.subcategories[category]:
        save_file_to_category(message, category, subcategory)
    else:
        markup = create_subcategory_menu(category)
        bot.send_message(
            message.chat.id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=markup
        )

def save_file_to_category(message, category, subcategory=None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        file_info = uploading_files.get(message.chat.id)
        if not file_info:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        existing_files = file_handler.get_files_list(category, subcategory)
        for file in existing_files:
            if file['name'] == file_info['file_name']:
                markup = create_main_menu()
                bot.send_message(
                    message.chat.id,
                    f"‚ùå –§–∞–π–ª —Å –∏–º–µ–Ω–µ–º {file_info['file_name']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                    reply_markup=markup
                )
                uploading_files.pop(message.chat.id, None)
                return

        file_data = bot.get_file(file_info['file_id'])
        if not file_data:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ.")
            return

        downloaded_file = bot.download_file(file_data.file_path)
        if not downloaded_file:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")
            return

        file_handler.save_file(
            file_info['file_id'],
            file_info['file_name'],
            downloaded_file,
            category,
            subcategory
        )
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        uploading_files.pop(message.chat.id, None)
        
        markup = create_main_menu()
        location = f"–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é {subcategory} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}" if subcategory else f"–∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}"
        bot.send_message(
            message.chat.id,
            f"‚úÖ –§–∞–π–ª {file_info['file_name']} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {location}!",
            reply_markup=markup
        )
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        uploading_files.pop(message.chat.id, None)
        markup = create_main_menu()
        bot.send_message(
            message.chat.id,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}",
            reply_markup=markup
        )

def show_all_files(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    all_files = []
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for category in file_handler.categories:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        files = file_handler.get_files_list(category)
        for file in files:
            file['category'] = category
            all_files.append(file)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if category in file_handler.subcategories:
            for subcategory in file_handler.subcategories[category]:
                files = file_handler.get_files_list(category, subcategory)
                for file in files:
                    file['category'] = category
                    file['subcategory'] = subcategory
                    all_files.append(file)
    
    if not all_files:
        bot.send_message(message.chat.id, "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏–º–µ–Ω–∏
    all_files.sort(key=lambda x: (x['category'], x.get('subcategory', ''), x['name']))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Å —ç–º–æ–¥–∑–∏ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
    total_files = len(all_files)
    counter_message = f"üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–ô–õ–û–í*\n\nüìö –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: *{total_files}*"
    bot.send_message(message.chat.id, counter_message, parse_mode='Markdown')
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 10 —Ñ–∞–π–ª–æ–≤
    for i in range(0, len(all_files), 10):
        chunk = all_files[i:i+10]
        response = ""
        for file in chunk:
            response += f"üìÑ {file['name']}\n"
            response += f"üìÇ –ü—É—Ç—å: {file['category']}"
            if 'subcategory' in file:
                response += f"/{file['subcategory']}"
            response += f"\nüìä –†–∞–∑–º–µ—Ä: {file['size']}\n"
            response += f"üïí –î–∞—Ç–∞: {file['date']}\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Å–ø–∏—Å–∫–∞
        if response:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    if message.text == 'üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã':
        show_categories(message)
    elif message.text == 'üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤':
        show_all_files(message)
    elif message.text == 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª':
        bot.send_message(
            message.chat.id,
            "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª, –∏ —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é."
        )
    elif message.text == '‚ùì –ü–æ–º–æ—â—å':
        help_command(message)
    elif message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = create_main_menu()
        bot.send_message(
            message.chat.id,
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=markup
        )
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º':
        show_categories(message)
    elif message.text.startswith('üìÇ '):
        category = message.text[2:].strip()
        if category in file_handler.subcategories:
            show_subcategories(message, category)
        else:
            list_files(message, category)
    elif message.text.startswith('üìÅ '):
        subcategory = message.text[2:].strip()
        for category in file_handler.subcategories:
            if subcategory in file_handler.subcategories[category]:
                list_files(message, category, subcategory)
                break
    elif message.text.startswith('üì• '):
        file_name = message.text[2:].strip()
        
        try:
            # –ò—â–µ–º —Ñ–∞–π–ª –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
            found = False
            for category in file_handler.categories:
                file_data = file_handler.get_file(file_name, category)
                if file_data is not None:
                    bot.send_document(
                        message.chat.id,
                        file_data,
                        visible_file_name=file_name
                    )
                    found = True
                    break
                
                if category in file_handler.subcategories:
                    for subcategory in file_handler.subcategories[category]:
                        file_data = file_handler.get_file(file_name, category, subcategory)
                        if file_data is not None:
                            bot.send_document(
                                message.chat.id,
                                file_data,
                                visible_file_name=file_name
                            )
                            found = True
                            break
                    if found:
                        break
            
            if not found:
                bot.reply_to(message, f"‚ùå –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    else:
        bot.send_message(
            message.chat.id,
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.polling(non_stop=True) 